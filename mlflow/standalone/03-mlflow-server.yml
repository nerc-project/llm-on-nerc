---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mlflow-setup
  labels:
    app: mlflow
  annotations:
    serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"mlflow-route"}}'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow-deployment
  labels:
    app: mlflow
    app.kubernetes.io/part-of: mlflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mlflow
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mlflow
    spec:
      containers:
      - name: mlflow
        image: 'quay.io/troyer/mlflow-server:latest'
        imagePullPolicy: IfNotPresent
        command:
          - mlflow
        args:
          - server
          - --host
          - 0.0.0.0
          - --backend-store-uri
          - postgresql://$(MLFLOW_DATABASE_USERNAME):$(ENCODED_DATABASE_PASSWORD)@$(MLFLOW_DATABASE_HOST):5432/$(MLFLOW_DATABASE_NAME)
          - --serve-artifacts
          - --artifacts-destination
          - s3://$(MLFLOW_S3_BUCKET_NAME)
        env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: mlflow-minio-root-user
                key: MINIO_ROOT_USER
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: mlflow-minio-root-user
                key: MINIO_ROOT_PASSWORD
          - name: MLFLOW_S3_ENDPOINT_URL
            value: "http://mlflow-minio-service:9000"
          - name: MLFLOW_S3_IGNORE_TLS
            value: "true"
          - name: MLFLOW_S3_BUCKET_NAME
            value: "mlflow-bucket"
          - name: MLFLOW_DATABASE_HOST
            value: "mlflow-postgresql-service"
          - name: MLFLOW_DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: mlflow-postgresql-secret
                key: database-user
          - name: ENCODED_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mlflow-postgresql-secret
                key: database-password
          - name: MLFLOW_DATABASE_NAME
            valueFrom:
              secretKeyRef:
                name: mlflow-postgresql-secret
                key: database-name
          - name: AWS_CA_BUNDLE
            value: /run/secrets/kubernetes.io/serviceaccount/service-ca.crt
        ports:
          - name: api
            containerPort: 5000
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: api
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 100
          timeoutSeconds: 8
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: api
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 100
          timeoutSeconds: 8
          successThreshold: 1
          failureThreshold: 3
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "500m"
            memory: "512Mi"
      - name: oauth-proxy
        image: 'registry.redhat.io/openshift4/ose-oauth-proxy:v4.12'
        imagePullPolicy: IfNotPresent
        args:
          - --https-address=:8443
          - --provider=openshift
          - --openshift-service-account=mlflow-setup
          - --upstream=http://localhost:5000
          - --tls-cert=/etc/tls/private/tls.crt
          - --tls-key=/etc/tls/private/tls.key
          - --cookie-secret=SECRET
          - --openshift-sar={"namespace":\"$OPENSHIFT_NAMESPACE\","resource":"services","resourceName":"mlflow-service","verb":"get"}
        env:
          - name: OPENSHIFT_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace  # Automatically gets the namespace where the pod is running
        ports:
          - name: oauth-proxy
            containerPort: 8443
        livenessProbe:
          httpGet:
            path: /oauth/healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 30
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /oauth/healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        resources:
          limits:
            cpu: "200m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "256Mi"
        volumeMounts:
          - mountPath: /etc/tls/private
            name: oauth-tls
      volumes:
      - name: oauth-tls
        secret:
          defaultMode: 420
          secretName: mlflow-server-tls
      restartPolicy: Always
      serviceAccount: mlflow-setup
      serviceAccountName: mlflow-setup
---
apiVersion: v1
kind: Service
metadata:
  name: mlflow-service
  labels:
    app: mlflow
  annotations:
    service.alpha.openshift.io/serving-cert-secret-name: mlflow-server-tls
spec:
  ports:
    - name: api
      protocol: TCP
      port: 5000
      targetPort: api
    - name: oauth-proxy
      protocol: TCP
      port: 8443
      targetPort: oauth-proxy
  selector:
    app: mlflow
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: mlflow-route
  labels:
    app: mlflow
spec:
  port:
    targetPort: oauth-proxy
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: reencrypt
  to:
    kind: Service
    name: mlflow-service
    weight: 100
  wildcardPolicy: None
